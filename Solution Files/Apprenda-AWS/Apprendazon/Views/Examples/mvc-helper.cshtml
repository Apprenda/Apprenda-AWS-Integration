@using Infragistics.Web.Mvc @* Reference the Ignite UI MVC Helpers Assembly *@

@model IgniteUICSMVC5Razor.ViewModels.ExampleViewModel

@{
    ViewBag.Title = "Ignite UI ASP.NET MVC Helper Examples";
    Layout = "~/Views/Shared/mvc-helper-layout.cshtml";
}

@section styles {
    <style>
        #chart {
            margin-top: 15px;
        }
    </style>
}

@section topScripts {
    
    <script src="http://cdn-na.infragistics.com/igniteui/latest/js/infragistics.loader.js" type="text/javascript"></script>
}

<!--
    The Infragistics Loader loads required Ignite UI
    JavaScript and CSS files into the page. The following helper
    tells the loader where the JavaScript and CSS paths exist in
    the application.

    Read more:  http://igniteui.com/loader/overview
                http://igniteui.com/loader/aspnet-mvc-helper
-->
@(Html.Infragistics().Loader()
            .ScriptPath("http://cdn-na.infragistics.com/igniteui/latest/js/")
            .CssPath("http://cdn-na.infragistics.com/igniteui/latest/css/")
            .Render())

<div class="container clear-fix">
    <h2>Grid</h2>

    <!--
        The igGrid is rendered on to the page via the
        Ignite UI MVC helper. Using this helper you can
        load the grid with data, enable features and much more.

        Read more:  http://igniteui.com/grid/overview
                    http://igniteui.com/grid/aspnet-mvc-helper
    -->
    @(Html.Infragistics().Grid(Model.Customers.AsQueryable())
        .DataBind()
        .Features(features =>
        {
            features.Sorting().Type(OpType.Local);
        })
        .Render())
</div>

<div class="container editors clear-fix">

    <h2>Editors</h2>

    <!--
        There are a number of different types of editors available
        in Ignite UI. The following code demonstrates how to use
        some of the most common types of editors.

        Read more: http://igniteui.com/editors/overview
    -->

    <form class="form-horizontal" role="form">
        <div class="form-group">
            <label for="textEditor" class="col-sm-2 control-label">Text Editor</label>
            <div class="col-sm-10">
                @(Html
                    .Infragistics()
                    .TextEditor()
                    .HtmlAttributes(Model.AddAttribute("class","form-control"))
                    .ID("textEditor")
                    .Render())
            </div>
        </div>
        <div class="form-group">
            <label for="numericEditor" class="col-sm-2 control-label">Numeric Editor</label>
            <div class="col-sm-10">
                @(Html
                    .Infragistics()
                    .NumericEditor()
                    .HtmlAttributes(Model.AddAttribute("class", "form-control"))
                    .ID("numericEditor")
                    .Render())
            </div>
        </div>
        <div class="form-group">
            <label for="dateEditor" class="col-sm-2 control-label">Date Editor</label>
            <div class="col-sm-10">
                @(Html
                    .Infragistics()
                    .DateTimeEditor()
                    .HtmlAttributes(Model.AddAttribute("class", "form-control"))
                    .ID("dateEditor")
                    .Render())
            </div>
        </div>
        <div class="form-group">
            <label for="currencyEditor" class="col-sm-2 control-label">Currency Editor</label>
            <div class="col-sm-10">
                @(Html
                    .Infragistics()
                    .CurrencyEditor()
                    .HtmlAttributes(Model.AddAttribute("class", "form-control"))
                    .ID("currencyEditor")
                    .Render())
            </div>
        </div>
        @*<div class="form-group">
            <label for="comboEditor" class="col-sm-2 control-label">Combo</label>
            <div class="col-sm-10">*@
                <!--
                    Read more: http://igniteui.com/combo/aspnet-mvc-helper
                -->
                @*@(Html
                    .Infragistics()
                    .Combo("combo", Model.Customers.AsQueryable())
                    .ID("comboEditor")
                    .HtmlAttributes(Model.AddAttribute("class", "form-control"))
                    .ValueKey("Id")
                    .TextKey("FullName")
                    .SelectedIndexes(new int[1])
                    .DataBind()
                    .Render())*@
            @*</div>
        </div>*@
    </form>

    
</div>

<div class="container clear-fix">
    <h2>Chart</h2>

    <!--
        The Ignite UI chart can render very large data sets and includes tooltips,
        crosshairs, gradients, highlighting, and animation functionality.
        The igDataChart renders over 50 chart types.

        Read more:  http://igniteui.com/data-chart/overview
                    http://igniteui.com/data-chart/aspnet-mvc-helper
    -->
    @(Html.Infragistics().DataChart(Model.CustomerCountSummaries.AsQueryable())
        .Height("300px")
        .ID("chart")
        .Axes(a =>
        {
            a.CategoryX("Label").Label(cl => cl.CategoryLabel);

            a.NumericY("Count")
                .MinimumValue(0)
                .MaximumValue(Model.Customers.Count());
        })
        .Series(s =>
        {
            s.Column("ActiveCustomers")
                .XAxis("Label")
                .YAxis("Count")
                .ValueMemberPath(cc => cc.CustomerCount);
        })
        .DataBind()
        .Render()
    )
</div>
